s the algorithm for Dutch national flag
Dutch national flag problem (red, white, blue)=(0, 1, 2)
Set 3 pointers l<=m<=r to partition the array
Use a conditional loop while m<=r check nums[m]:

case red:
    swap(nums[l], nums[m]);
    l++, m++;
    break;
case white:
    m++;
    break;
case blue:
    swap(nums[m], nums[r]);
    r--;


Let's see how this algorithm works. The following output is modifying the submitted code by adding some outputs:

[2,0,2,1,0,0,1,0,1,2]
 2 0 2 1 0 0 1 0 1 2
 L
 M
                   R
-------
 2 0 2 1 0 0 1 0 1 2
 L
 M
                 R
-------
 1 0 2 1 0 0 1 0 2 2
 L
 M
               R
-------
 1 0 2 1 0 0 1 0 2 2
 L
   M
               R
-------
 0 1 2 1 0 0 1 0 2 2
   L
     M
               R
-------
 0 1 0 1 0 0 1 2 2 2
   L
     M
             R
-------
 0 0 1 1 0 0 1 2 2 2
     L
       M
             R
-------
 0 0 1 1 0 0 1 2 2 2
     L
         M
             R
-------
 0 0 0 1 1 0 1 2 2 2
       L
           M
             R
-------
 0 0 0 0 1 1 1 2 2 2
         L
             M
             R
-------
Complexity

Time complexity:
O(n)

Space complexity:
Extra: O(1)


WQORKINGS 

Dutch National Flag Algorithm

The dutch national flag algorithm involves sorting the nums array by partitioning it into 3 segments.

nums[0]...nums[low - 1] : This part should consist of all zeroes.
nums[low]...nums[mid - 1] : This part should consist of all ones.
nums[mid]...nums[end of array] : This part should consist of all twos.


We basically look for 3 possible cases for 3 values of mid here,
1️⃣ Case 1 → Value of mid is 0

Swap it with low because we want all 0's to be before mid.
2️⃣ Case 2 → Value of mid is 1

Increment mid because 1 is at the correct position it should be.
3️⃣ Case 3 → Value of mid is 2

We swap it with high because we want all 2's to be after high.